{"version":3,"sources":["../static/js/8.chunk.js","../node_modules/devextreme-react/ui/number-box.js","../node_modules/devextreme/ui/number_box.js","../node_modules/devextreme/ui/number_box/number_box.js","../node_modules/devextreme/ui/number_box/number_box.mask.js","../node_modules/devextreme/ui/number_box/number_box.caret.js","../node_modules/devextreme/ui/number_box/number_box.base.js","../node_modules/devextreme/ui/number_box/number_box.spin.js","../node_modules/devextreme-react/number-box.js"],"names":["webpackJsonp","723","module","exports","__webpack_require__","Object","defineProperty","value","m","p","hasOwnProperty","number_box_1","default","745","753","registerComponent","NumberBoxMask","754","eventsEngine","extend","isNumeric","browser","fitIntoRange","inRange","escapeRegExp","number","maskCaret","getLDMLFormat","getFormat","NumberBoxBase","eventUtils","typeUtils","ensureDefined","defaultValue","inherit","_getDefaultOptions","this","callBase","useMaskBehavior","format","_isDeleteKey","key","_supportedKeys","_useMaskBehavior","that","minus","_revertSign","bind","del","_removeHandler","backspace","leftArrow","_arrowHandler","rightArrow","home","_moveCaretToBoundary","enter","_updateFormattedValue","end","_focusInHandler","e","caret","_caret","start","msie","clearTimeout","_ieCaretTimeout","setTimeout","_focusOutHandler","_focusOutOccurs","_parsedValue","_tryParse","_getInputVal","_adjustParsedValue","_setTextByParsedValue","_isValueDirty","_isDirty","trigger","_input","option","step","text","_getFormatPattern","nextCaret","getCaretWithOffset","isCaretInBoundaries","preventDefault","getCaretInBoundaries","direction","shiftKey","boundaries","getCaretBoundaries","newCaret","_shouldMoveCaret","decimalSeparator","getDecimalSeparator","isDecimalSeparatorNext","charAt","isZeroNext","moveToFloat","_lastKey","zeroToZeroReplace","convertDigits","val","_keyboardHandler","originalEvent","_shouldHandleKey","enteredChar","newValue","_moveCaret","_keyPressHandler","char","slice","_isStub","decimalSeparatorIndex","indexOf","_isNonStubAfter","length","_replaceSelectedText","search","_isValueInRange","valueAfterRemoving","_isPercentFormat","replace","_parse","formatOption","isFunction","formatter","parser","parse","_format","_getFormatForSign","signParts","split","sign","getSign","_removeStubs","excludeComma","thousandsSeparator","getThousandsSeparator","stubs","regExp","RegExp","_truncateToPrecision","maxPrecision","isDefined","strValue","toString","parsedValue","parseFloat","substr","isNaN","selection","editedText","isTextSelected","parsed","_getPrecisionLimits","max","isValueChanged","isDecimalPointRestricted","isUselessCharRestricted","_isValueIncomplete","point","pointIndex","isCaretOnFloat","textParts","floatLength","precision","isPrecisionInRange","min","endsWithZero","_setInputText","getCaretAfterFormat","_formattedValue","_toggleEmptinessEventHandler","_renderInputType","isNumberType","_setInputType","_isChar","str","offset","adjustedCaret","isSpecialChar","ctrlKey","altKey","isMinusKey","_renderInput","_renderFormatter","_clearCache","_detachFormatterEvents","_attachFormatterEvents","off","$input","on","addNamespace","_formatValue","_forceRefreshInputValue","index","isString","escapedDecimalSeparator","regExpString","test","_parseValue","currentFormat","floatPart","_applyRevertedSign","preserveSelectedText","previousText","currentText","getCaretOffset","caretInBoundaries","_removeMinusFromText","formatted","textWithoutMinus","wasMinusRemoved","_renderDisplayText","apply","arguments","_renderValue","clearedText","_valueChangeEventHandler","_saveValueChangeEvent","_optionChanged","args","name","_optionValuesEqual","oldValue","_clean","755","clearedFormat","result","exec","_getDigitCountBeforeIndex","_reverseText","reverse","join","_getDigitPositionByIndex","digitIndex","counter","pointPosition","newPointPosition","formattedParts","relativeIndex","digitsBefore","newPosition","positionFromEnd","digitsFromEnd","newPositionFromEnd","newPositionFromBegin","newText","previousBoundaries","756","$","domAdapter","commonUtils","mathUtils","inArray","focused","devices","TextEditor","pointerEvents","wheelEvent","SpinButton","messageLocalization","math","Math","FIREFOX_CONTROL_KEYS","upArrow","stopPropagation","_spinUpChangeHandler","downArrow","_spinDownChangeHandler","showSpinButtons","useLargeSpinButtons","mode","invalidValueMessage","_defaultOptionsRules","concat","device","real","generic","isSimulator","options","platform","_initMarkup","_renderSubmitElement","$element","addClass","_renderContentImpl","_validateValue","setAria","_renderMouseWheelHandler","_$submitElement","attr","appendTo","_setSubmitValue","applyServerDecimalSeparator","_getSubmitElement","String","fromCharCode","which","metaKey","_keyPressed","eventName","NAME","mouseWheelAction","_createAction","_mouseWheelHandler","event","dxEvent","delta","_spinValueChange","inputValue","Number","_forceValueRender","_renderInputAddons","_renderValueEventName","_toggleDisabledState","_$spinUp","getInstance","_$spinDown","formattedValue","_applyValueFormat","_renderProps","prop","valuemin","valuemax","_renderSpinButtons","spinButtonsVisible","toggleClass","_toggleTouchFriendlyClass","_$spinContainer","remove","_createSpinButtons","prependTo","_buttonsContainer","down","pointerDownAction","_spinButtonsPointerDownHandler","$spinContainer","_createComponent","onChange","getActiveElement","_normalizeInputValue","_correctRounding","regex","isFloatValue","isFloatStep","valueAccuracy","stepAccuracy","accuracy","_round","multiplier","pow","round","_renderValueChangeEvent","_normalizeText","valueHasDigits","_isValueValid","_applyValueBoundaries","validationRequest","fire","editor","isValueIncomplete","isValueCorrect","_replaceCommaWithPoint","_inputIsInvalid","isNumberMode","validityState","get","validity","badInput","_isNumber","isValueValid","isValid","isNumber","validationError","editorSpecific","message","trim","reset","_resumeValueChangeAction","757","Widget","feedbackEvents","holdEvent","Deferred","POINTERUP_EVENT_NAME","up","POINTERCANCEL_EVENT_NAME","cancel","activeStateEnabled","hoverStateEnabled","SPIN_CLASS","_spinIcon","_render","_spinDownHandler","_spinChangeHandler","_createActionByOption","_clearTimer","_feedBackDeferred","lock","_holdTimer","setInterval","document","getDocument","_dispose","resolve","clearInterval","_invalidate","907","__extends","extendStatics","setPrototypeOf","__proto__","Array","d","b","__","constructor","prototype","create","prop_types_1","component_1","nested_option_1","NumberBox","_super","_this","_WidgetClass","_defaults","_instance","enumerable","configurable","Component","propTypes","accessKey","PropTypes","string","bool","disabled","elementAttr","object","focusStateEnabled","oneOfType","func","height","hint","inputAttr","oneOf","onContentReady","onCopy","onCut","onDisposing","onEnterKey","onFocusIn","onFocusOut","onInitialized","onInput","onKeyDown","onKeyPress","onKeyUp","onOptionChanged","onPaste","onValueChanged","placeholder","readOnly","rtlEnabled","showClearButton","stylingMode","tabIndex","validationMessageMode","valueChangeEvent","visible","width","Format","OptionName"],"mappings":"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","file":"static/js/8.chunk.js","sourcesContent":["webpackJsonp([8],{\n\n/***/ 723:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*!\n * devextreme-react\n * Version: 18.2.2-beta.1\n * Build date: Thu Oct 25 2018\n *\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @deprecated Use 'devextreme-vue/number-box' file instead */\n__export(__webpack_require__(907));\nvar number_box_1 = __webpack_require__(907);\nexports.default = number_box_1.default;\n\n\n/***/ }),\n\n/***/ 745:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nmodule.exports = __webpack_require__(753);\r\nmodule.exports.default = module.exports;\r\n\n\n/***/ }),\n\n/***/ 753:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar registerComponent = __webpack_require__(16),\r\n    NumberBoxMask = __webpack_require__(754);\r\nregisterComponent(\"dxNumberBox\", NumberBoxMask);\r\nmodule.exports = NumberBoxMask;\r\n\n\n/***/ }),\n\n/***/ 754:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar eventsEngine = __webpack_require__(7),\r\n    extend = __webpack_require__(3).extend,\r\n    isNumeric = __webpack_require__(4).isNumeric,\r\n    browser = __webpack_require__(78),\r\n    fitIntoRange = __webpack_require__(60).fitIntoRange,\r\n    inRange = __webpack_require__(60).inRange,\r\n    escapeRegExp = __webpack_require__(6).escapeRegExp,\r\n    number = __webpack_require__(336),\r\n    maskCaret = __webpack_require__(755),\r\n    getLDMLFormat = __webpack_require__(343).getFormat,\r\n    NumberBoxBase = __webpack_require__(756),\r\n    eventUtils = __webpack_require__(8),\r\n    typeUtils = __webpack_require__(4);\r\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\",\r\n    MOVE_FORWARD = 1,\r\n    MOVE_BACKWARD = -1,\r\n    MINUS = \"-\",\r\n    NUMPUD_MINUS_KEY_IE = \"Subtract\",\r\n    INPUT_EVENT = \"input\";\r\nvar ensureDefined = function(value, defaultValue) {\r\n    return void 0 === value ? defaultValue : value\r\n};\r\nvar NumberBoxMask = NumberBoxBase.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            useMaskBehavior: true,\r\n            format: null\r\n        })\r\n    },\r\n    _isDeleteKey: function(key) {\r\n        return \"Delete\" === key || \"Del\" === key\r\n    },\r\n    _supportedKeys: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n        var that = this;\r\n        return extend(this.callBase(), {\r\n            minus: that._revertSign.bind(that),\r\n            del: that._removeHandler.bind(that),\r\n            backspace: that._removeHandler.bind(that),\r\n            leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\r\n            rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\r\n            home: that._moveCaretToBoundary.bind(that, MOVE_FORWARD),\r\n            enter: that._updateFormattedValue.bind(that),\r\n            end: that._moveCaretToBoundary.bind(that, MOVE_BACKWARD)\r\n        })\r\n    },\r\n    _focusInHandler: function(e) {\r\n        this.callBase(e);\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            return\r\n        }\r\n        if (browser.msie) {\r\n            clearTimeout(this._ieCaretTimeout);\r\n            this._ieCaretTimeout = setTimeout(this._moveCaretToBoundary.bind(this, MOVE_BACKWARD, e))\r\n        } else {\r\n            this._moveCaretToBoundary(MOVE_BACKWARD, e)\r\n        }\r\n    },\r\n    _focusOutHandler: function(e) {\r\n        this._focusOutOccurs = true;\r\n        if (this._useMaskBehavior()) {\r\n            this._updateFormattedValue()\r\n        }\r\n        this.callBase(e);\r\n        this._focusOutOccurs = false\r\n    },\r\n    _updateFormattedValue: function() {\r\n        this._parsedValue = this._tryParse(this._getInputVal(), this._caret());\r\n        this._adjustParsedValue();\r\n        this._setTextByParsedValue();\r\n        if (this._isValueDirty()) {\r\n            this._isDirty = false;\r\n            eventsEngine.trigger(this._input(), \"change\")\r\n        }\r\n    },\r\n    _isValueDirty: function() {\r\n        return this._isDirty || this._parsedValue !== this.option(\"value\")\r\n    },\r\n    _arrowHandler: function(step, e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var text = this._getInputVal(),\r\n            format = this._getFormatPattern(),\r\n            nextCaret = maskCaret.getCaretWithOffset(this._caret(), step);\r\n        if (!maskCaret.isCaretInBoundaries(nextCaret, text, format)) {\r\n            nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\r\n            e.preventDefault();\r\n            this._caret(maskCaret.getCaretInBoundaries(nextCaret, text, format))\r\n        }\r\n    },\r\n    _moveCaretToBoundary: function(direction, e) {\r\n        if (!this._useMaskBehavior() || e.shiftKey) {\r\n            return\r\n        }\r\n        var boundaries = maskCaret.getCaretBoundaries(this._getInputVal(), this._getFormatPattern()),\r\n            newCaret = maskCaret.getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\r\n        this._caret(newCaret);\r\n        e && e.preventDefault()\r\n    },\r\n    _shouldMoveCaret: function(text, caret) {\r\n        var decimalSeparator = number.getDecimalSeparator(),\r\n            isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator,\r\n            isZeroNext = \"0\" === text.charAt(caret.end),\r\n            moveToFloat = this._lastKey === decimalSeparator && isDecimalSeparatorNext,\r\n            zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\r\n        return moveToFloat || zeroToZeroReplace\r\n    },\r\n    _getInputVal: function() {\r\n        return number.convertDigits(this._input().val(), true)\r\n    },\r\n    _keyboardHandler: function(e) {\r\n        this._lastKey = number.convertDigits(e.originalEvent.key, true);\r\n        if (!this._shouldHandleKey(e.originalEvent)) {\r\n            return this.callBase(e)\r\n        }\r\n        var text = this._getInputVal(),\r\n            caret = this._caret();\r\n        var enteredChar = this._lastKey === MINUS ? \"\" : this._lastKey,\r\n            newValue = this._tryParse(text, caret, enteredChar);\r\n        if (void 0 === newValue) {\r\n            if (this._lastKey !== MINUS) {\r\n                e.originalEvent.preventDefault()\r\n            }\r\n            if (this._shouldMoveCaret(text, caret)) {\r\n                this._moveCaret(1)\r\n            }\r\n        } else {\r\n            this._parsedValue = newValue\r\n        }\r\n        return this.callBase(e)\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _removeHandler: function(e) {\r\n        var caret = this._caret(),\r\n            text = this._getInputVal(),\r\n            start = caret.start,\r\n            end = caret.end;\r\n        this._lastKey = e.key;\r\n        if (caret.start === caret.end) {\r\n            this._isDeleteKey(e.key) ? end++ : start--\r\n        }\r\n        var char = text.slice(start, end);\r\n        if (this._isStub(char)) {\r\n            this._moveCaret(this._isDeleteKey(e.key) ? 1 : -1);\r\n            if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\r\n                this._revertSign(e);\r\n                this._setTextByParsedValue()\r\n            }\r\n            e.preventDefault();\r\n            return\r\n        }\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        if (char === decimalSeparator) {\r\n            var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n            if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\r\n                this._moveCaret(this._isDeleteKey(e.key) ? 1 : -1);\r\n                e.preventDefault()\r\n            }\r\n            return\r\n        }\r\n        if (end - start < text.length) {\r\n            var editedText = this._replaceSelectedText(text, {\r\n                    start: start,\r\n                    end: end\r\n                }, \"\"),\r\n                noDigits = editedText.search(/[0-9]/) < 0;\r\n            if (noDigits && this._isValueInRange(0)) {\r\n                this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\r\n                return\r\n            }\r\n        }\r\n        var valueAfterRemoving = this._tryParse(text, {\r\n            start: start,\r\n            end: end\r\n        }, \"\");\r\n        if (void 0 === valueAfterRemoving) {\r\n            e.preventDefault()\r\n        } else {\r\n            this._parsedValue = valueAfterRemoving\r\n        }\r\n    },\r\n    _isPercentFormat: function() {\r\n        var format = this._getFormatPattern(),\r\n            noEscapedFormat = format.replace(/'[^']+'/g, \"\");\r\n        return noEscapedFormat.indexOf(\"%\") !== -1\r\n    },\r\n    _parse: function(text, format) {\r\n        var formatOption = this.option(\"format\"),\r\n            isCustomParser = typeUtils.isFunction(formatOption.formatter),\r\n            parser = isCustomParser ? formatOption.parser : number.parse;\r\n        return parser(text, format)\r\n    },\r\n    _format: function(value, format) {\r\n        var formatOption = this.option(\"format\"),\r\n            isCustomFormatter = typeUtils.isFunction(formatOption.formatter),\r\n            formatter = isCustomFormatter ? formatOption.formatter : number.format;\r\n        return formatter(value, format)\r\n    },\r\n    _getFormatPattern: function() {\r\n        var format = this.option(\"format\"),\r\n            isLDMLPattern = \"string\" === typeof format && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\r\n        if (isLDMLPattern) {\r\n            return format\r\n        } else {\r\n            return getLDMLFormat(function(value) {\r\n                return this._format(value, format)\r\n            }.bind(this))\r\n        }\r\n    },\r\n    _getFormatForSign: function(text) {\r\n        var format = this._getFormatPattern(),\r\n            signParts = format.split(\";\"),\r\n            sign = number.getSign(text, format);\r\n        signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n        return sign < 0 ? signParts[1] : signParts[0]\r\n    },\r\n    _removeStubs: function(text, excludeComma) {\r\n        var format = this._getFormatForSign(text),\r\n            thousandsSeparator = number.getThousandsSeparator(),\r\n            stubs = format.replace(/[#0.,]/g, \"\"),\r\n            regExp = new RegExp(\"[-\" + escapeRegExp((excludeComma ? \"\" : thousandsSeparator) + stubs) + \"]\", \"g\");\r\n        return text.replace(regExp, \"\")\r\n    },\r\n    _truncateToPrecision: function(value, decimalSeparator, maxPrecision) {\r\n        if (typeUtils.isDefined(value)) {\r\n            var strValue = value.toString(),\r\n                decimalSeparatorIndex = strValue.indexOf(decimalSeparator);\r\n            if (strValue && decimalSeparatorIndex > -1) {\r\n                var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\r\n                return isNaN(parsedValue) ? value : parsedValue\r\n            }\r\n        }\r\n        return value\r\n    },\r\n    _tryParse: function(text, selection, char) {\r\n        var editedText = this._replaceSelectedText(text, selection, char),\r\n            format = this._getFormatPattern(),\r\n            isTextSelected = selection.start !== selection.end,\r\n            parsed = this._parse(editedText, format),\r\n            maxPrecision = this._getPrecisionLimits(format, editedText).max,\r\n            isValueChanged = parsed !== this._parsedValue,\r\n            decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision,\r\n            isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\r\n        if (isDecimalPointRestricted || isUselessCharRestricted) {\r\n            return\r\n        }\r\n        if (\"\" === editedText) {\r\n            parsed = 0\r\n        }\r\n        if (isNaN(parsed)) {\r\n            return\r\n        }\r\n        var value = null === parsed ? this._parsedValue : parsed;\r\n        parsed = this._truncateToPrecision(value, decimalSeparator, maxPrecision);\r\n        return this._isPercentFormat() ? parsed && parsed / 100 : parsed\r\n    },\r\n    _isValueIncomplete: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        var caret = this._caret(),\r\n            point = number.getDecimalSeparator(),\r\n            pointIndex = text.indexOf(point),\r\n            isCaretOnFloat = pointIndex > 0 && pointIndex < caret.start,\r\n            textParts = this._removeStubs(text, true).split(point);\r\n        if (!isCaretOnFloat || 2 !== textParts.length) {\r\n            return false\r\n        }\r\n        var floatLength = textParts[1].length,\r\n            precision = this._getPrecisionLimits(this._getFormatPattern(), text),\r\n            isPrecisionInRange = inRange(floatLength, precision.min, precision.max),\r\n            endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\r\n        return isPrecisionInRange && (endsWithZero || !floatLength)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        var min = ensureDefined(this.option(\"min\"), -(1 / 0)),\r\n            max = ensureDefined(this.option(\"max\"), 1 / 0);\r\n        return inRange(value, min, max)\r\n    },\r\n    _setInputText: function(text) {\r\n        var newCaret = maskCaret.getCaretAfterFormat(this._getInputVal(), text, this._caret(), this._getFormatPattern()),\r\n            newValue = number.convertDigits(text);\r\n        if (this._formattedValue !== newValue) {\r\n            this._isDirty = true\r\n        }\r\n        this._input().val(newValue);\r\n        this._toggleEmptinessEventHandler();\r\n        this._formattedValue = text;\r\n        if (!this._focusOutOccurs) {\r\n            this._caret(newCaret)\r\n        }\r\n    },\r\n    _useMaskBehavior: function() {\r\n        return !!this.option(\"format\") && this.option(\"useMaskBehavior\")\r\n    },\r\n    _renderInputType: function() {\r\n        var isNumberType = \"number\" === this.option(\"mode\");\r\n        if (this._useMaskBehavior() && isNumberType) {\r\n            this._setInputType(\"tel\")\r\n        } else {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _isChar: function(str) {\r\n        return \"string\" === typeof str && 1 === str.length\r\n    },\r\n    _moveCaret: function(offset) {\r\n        if (!offset) {\r\n            return\r\n        }\r\n        var newCaret = maskCaret.getCaretWithOffset(this._caret(), offset),\r\n            adjustedCaret = maskCaret.getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\r\n        this._caret(adjustedCaret)\r\n    },\r\n    _shouldHandleKey: function(e) {\r\n        var isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(e.key),\r\n            isMinusKey = e.key === MINUS,\r\n            useMaskBehavior = this._useMaskBehavior();\r\n        return useMaskBehavior && !isSpecialChar && !isMinusKey\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._renderFormatter()\r\n    },\r\n    _renderFormatter: function() {\r\n        this._clearCache();\r\n        this._detachFormatterEvents();\r\n        if (this._useMaskBehavior()) {\r\n            this._attachFormatterEvents()\r\n        }\r\n    },\r\n    _detachFormatterEvents: function() {\r\n        eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE)\r\n    },\r\n    _attachFormatterEvents: function() {\r\n        var $input = this._input();\r\n        eventsEngine.on($input, eventUtils.addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), this._formatValue.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n            this._caret(maskCaret.getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()))\r\n        }.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n    },\r\n    _isNonStubAfter: function(index, text) {\r\n        text = (text || this._getInputVal()).slice(index);\r\n        return text && !this._isStub(text, true)\r\n    },\r\n    _isStub: function(str, isString) {\r\n        var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator()),\r\n            regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\",\r\n            stubRegExp = new RegExp(regExpString, \"g\");\r\n        return stubRegExp.test(str) && (isString || this._isChar(str))\r\n    },\r\n    _parseValue: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        return this._parsedValue\r\n    },\r\n    _getPrecisionLimits: function(text) {\r\n        var currentFormat = this._getFormatForSign(text),\r\n            floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\"),\r\n            minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length,\r\n            maxPrecision = floatPart.length;\r\n        return {\r\n            min: minPrecision,\r\n            max: maxPrecision\r\n        }\r\n    },\r\n    _revertSign: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            if (e.key === MINUS || e.key === NUMPUD_MINUS_KEY_IE) {\r\n                this._applyRevertedSign(e, caret, true);\r\n                return\r\n            } else {\r\n                this._caret(maskCaret.getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()))\r\n            }\r\n        }\r\n        this._applyRevertedSign(e, caret)\r\n    },\r\n    _applyRevertedSign: function(e, caret, preserveSelectedText) {\r\n        var newValue = -1 * ensureDefined(this._parsedValue, null);\r\n        if (this._isValueInRange(newValue)) {\r\n            this._parsedValue = newValue;\r\n            if (preserveSelectedText) {\r\n                var format = this._getFormatPattern(),\r\n                    previousText = this._getInputVal();\r\n                this._setTextByParsedValue();\r\n                e.preventDefault();\r\n                var currentText = this._getInputVal(),\r\n                    offset = maskCaret.getCaretOffset(previousText, currentText, format);\r\n                caret = maskCaret.getCaretWithOffset(caret, offset);\r\n                var caretInBoundaries = maskCaret.getCaretInBoundaries(caret, currentText, format);\r\n                if (browser.msie) {\r\n                    clearTimeout(this._ieCaretTimeout);\r\n                    this._ieCaretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries))\r\n                } else {\r\n                    this._caret(caretInBoundaries)\r\n                }\r\n            }\r\n            if (e.key === NUMPUD_MINUS_KEY_IE) {\r\n                eventsEngine.trigger(this._input(), INPUT_EVENT)\r\n            }\r\n        }\r\n    },\r\n    _removeMinusFromText: function(text, caret) {\r\n        var isMinusPressed = this._lastKey === MINUS && text.charAt(caret.start - 1) === MINUS;\r\n        return isMinusPressed ? this._replaceSelectedText(text, {\r\n            start: caret.start - 1,\r\n            end: caret.start\r\n        }, \"\") : text\r\n    },\r\n    _setTextByParsedValue: function() {\r\n        var format = this._getFormatPattern(),\r\n            parsed = this._parseValue(),\r\n            formatted = this._format(parsed, format) || \"\";\r\n        this._setInputText(formatted)\r\n    },\r\n    _formatValue: function() {\r\n        var text = this._getInputVal(),\r\n            caret = this._caret(),\r\n            textWithoutMinus = this._removeMinusFromText(text, caret),\r\n            wasMinusRemoved = textWithoutMinus !== text;\r\n        this._isDirty = false;\r\n        text = textWithoutMinus;\r\n        if (this._isValueIncomplete(textWithoutMinus)) {\r\n            this._formattedValue = text;\r\n            if (wasMinusRemoved) {\r\n                this._setTextByParsedValue()\r\n            }\r\n            return\r\n        }\r\n        var textWasChanged = this._formattedValue !== text;\r\n        if (textWasChanged) {\r\n            var value = this._tryParse(text, caret, \"\");\r\n            if (typeUtils.isDefined(value)) {\r\n                this._parsedValue = value\r\n            }\r\n        }\r\n        this._setTextByParsedValue()\r\n    },\r\n    _renderDisplayText: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._toggleEmptinessEventHandler()\r\n        } else {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._parsedValue = this.option(\"value\");\r\n            this._setTextByParsedValue()\r\n        }\r\n        this.callBase()\r\n    },\r\n    _adjustParsedValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var clearedText = this._removeStubs(this._getInputVal()),\r\n            parsedValue = clearedText ? this._parseValue() : null;\r\n        if (!isNumeric(parsedValue)) {\r\n            this._parsedValue = parsedValue;\r\n            return\r\n        }\r\n        this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(e)\r\n        }\r\n        this._saveValueChangeEvent(e);\r\n        this._lastKey = null;\r\n        this._adjustParsedValue();\r\n        this.option(\"value\", this._parsedValue)\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"format\":\r\n            case \"useMaskBehavior\":\r\n                this._renderFormatter();\r\n                this._renderValue();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._adjustParsedValue();\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _optionValuesEqual: function(name, oldValue, newValue) {\r\n        if (\"value\" === name && 0 === oldValue && 0 === newValue) {\r\n            return 1 / oldValue === 1 / newValue\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _clearCache: function() {\r\n        delete this._formattedValue;\r\n        delete this._lastKey;\r\n        delete this._parsedValue;\r\n        delete this._isDirty;\r\n        delete this._focusOutOccurs;\r\n        clearTimeout(this._ieCaretTimeout);\r\n        delete this._ieCaretTimeout\r\n    },\r\n    _clean: function() {\r\n        this._clearCache();\r\n        this.callBase()\r\n    }\r\n});\r\nmodule.exports = NumberBoxMask;\r\n\n\n/***/ }),\n\n/***/ 755:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.caret.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar fitIntoRange = __webpack_require__(60).fitIntoRange,\r\n    escapeRegExp = __webpack_require__(6).escapeRegExp,\r\n    number = __webpack_require__(336);\r\nvar getCaretBoundaries = function(text, format) {\r\n    var signParts = format.split(\";\"),\r\n        sign = number.getSign(text, format);\r\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n    format = sign < 0 ? signParts[1] : signParts[0];\r\n    var clearedFormat = format.replace(/'([^']*)'/g, \"$1\"),\r\n        result = /^([^#0\\.,]*)([#0\\.,]*)([^#0\\.,]*)$/.exec(clearedFormat);\r\n    var startBorder = result[1].length,\r\n        endBorder = text.length - result[3].length;\r\n    return {\r\n        start: startBorder,\r\n        end: endBorder\r\n    }\r\n};\r\nvar _getDigitCountBeforeIndex = function(index, text) {\r\n    var decimalSeparator = number.getDecimalSeparator(),\r\n        regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\"),\r\n        textBeforePosition = text.slice(0, index);\r\n    return textBeforePosition.replace(regExp, \"\").length\r\n};\r\nvar _reverseText = function(text) {\r\n    return text.split(\"\").reverse().join(\"\")\r\n};\r\nvar _getDigitPositionByIndex = function(digitIndex, text) {\r\n    if (!digitIndex) {\r\n        return -1\r\n    }\r\n    var regExp = /[0-9]/g,\r\n        counter = 1,\r\n        index = null,\r\n        result = regExp.exec(text);\r\n    while (result) {\r\n        index = result.index;\r\n        if (!digitIndex || counter >= digitIndex) {\r\n            return index\r\n        }\r\n        counter++;\r\n        result = regExp.exec(text)\r\n    }\r\n    return null === index ? text.length : index\r\n};\r\nvar getCaretWithOffset = function(caret, offset) {\r\n    if (void 0 === caret.start) {\r\n        caret = {\r\n            start: caret,\r\n            end: caret\r\n        }\r\n    }\r\n    return {\r\n        start: caret.start + offset,\r\n        end: caret.end + offset\r\n    }\r\n};\r\nvar getCaretAfterFormat = function(text, formatted, caret, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var point = number.getDecimalSeparator(),\r\n        pointPosition = text.indexOf(point),\r\n        newPointPosition = formatted.indexOf(point),\r\n        textParts = text.split(point),\r\n        formattedParts = formatted.split(point),\r\n        isCaretOnFloat = pointPosition !== -1 && caret.start > pointPosition;\r\n    if (isCaretOnFloat) {\r\n        var relativeIndex = caret.start - pointPosition - 1,\r\n            digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]),\r\n            newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\r\n        return getCaretInBoundaries(newPosition, formatted, format)\r\n    } else {\r\n        var positionFromEnd = textParts[0].length - caret.start,\r\n            digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0])),\r\n            newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedParts[0])),\r\n            newPositionFromBegin = formattedParts[0].length - (newPositionFromEnd + 1);\r\n        return getCaretInBoundaries(newPositionFromBegin, formatted, format)\r\n    }\r\n};\r\nvar isCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretInBoundaries(caret, text, format);\r\n    return caret.start >= boundaries.start && caret.end <= boundaries.end\r\n};\r\nvar getCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretBoundaries(text, format),\r\n        adjustedCaret = {\r\n            start: fitIntoRange(caret.start, boundaries.start, boundaries.end),\r\n            end: fitIntoRange(caret.end, boundaries.start, boundaries.end)\r\n        };\r\n    return adjustedCaret\r\n};\r\nvar getCaretOffset = function(previousText, newText, format) {\r\n    var previousBoundaries = getCaretBoundaries(previousText, format),\r\n        newBoundaries = getCaretBoundaries(newText, format);\r\n    return newBoundaries.start - previousBoundaries.start\r\n};\r\nexports.getCaretBoundaries = getCaretBoundaries;\r\nexports.isCaretInBoundaries = isCaretInBoundaries;\r\nexports.getCaretWithOffset = getCaretWithOffset;\r\nexports.getCaretInBoundaries = getCaretInBoundaries;\r\nexports.getCaretAfterFormat = getCaretAfterFormat;\r\nexports.getCaretOffset = getCaretOffset;\r\n\n\n/***/ }),\n\n/***/ 756:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.base.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar $ = __webpack_require__(1),\r\n    domAdapter = __webpack_require__(11),\r\n    eventsEngine = __webpack_require__(7),\r\n    commonUtils = __webpack_require__(6),\r\n    mathUtils = __webpack_require__(60),\r\n    extend = __webpack_require__(3).extend,\r\n    inArray = __webpack_require__(15).inArray,\r\n    focused = __webpack_require__(52).focused,\r\n    devices = __webpack_require__(14),\r\n    TextEditor = __webpack_require__(344),\r\n    eventUtils = __webpack_require__(8),\r\n    pointerEvents = __webpack_require__(31),\r\n    wheelEvent = __webpack_require__(339),\r\n    SpinButton = __webpack_require__(757),\r\n    messageLocalization = __webpack_require__(24);\r\nvar math = Math;\r\nvar WIDGET_CLASS = \"dx-numberbox\",\r\n    SPIN_CLASS = \"dx-numberbox-spin\",\r\n    SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\",\r\n    SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\r\nvar FIREFOX_CONTROL_KEYS = [\"Tab\", \"Del\", \"Delete\", \"Backspace\", \"Left\", \"ArrowLeft\", \"Right\", \"ArrowRight\", \"Home\", \"End\", \"Enter\"];\r\nvar NumberBoxBase = TextEditor.inherit({\r\n    _supportedKeys: function() {\r\n        return extend(this.callBase(), {\r\n            upArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinUpChangeHandler(e)\r\n            },\r\n            downArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinDownChangeHandler(e)\r\n            },\r\n            enter: function() {}\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: 0,\r\n            min: void 0,\r\n            max: void 0,\r\n            step: 1,\r\n            showSpinButtons: false,\r\n            useLargeSpinButtons: true,\r\n            mode: \"text\",\r\n            invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\")\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return devices.real().generic && !devices.isSimulator()\r\n            },\r\n            options: {\r\n                useLargeSpinButtons: false\r\n            }\r\n        }, {\r\n            device: function() {\r\n                return \"generic\" !== devices.real().platform\r\n            },\r\n            options: {\r\n                mode: \"number\"\r\n            }\r\n        }])\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderSubmitElement();\r\n        this.$element().addClass(WIDGET_CLASS);\r\n        this.callBase()\r\n    },\r\n    _renderContentImpl: function() {\r\n        this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\r\n        this.setAria(\"role\", \"spinbutton\");\r\n        this._renderMouseWheelHandler()\r\n    },\r\n    _renderSubmitElement: function() {\r\n        this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\r\n        this._setSubmitValue(this.option(\"value\"))\r\n    },\r\n    _setSubmitValue: function(value) {\r\n        this._$submitElement.val(commonUtils.applyServerDecimalSeparator(value))\r\n    },\r\n    _getSubmitElement: function() {\r\n        return this._$submitElement\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        this.callBase(e);\r\n        var ch = e.key || String.fromCharCode(e.which),\r\n            validCharRegExp = /[\\d.,eE\\-+]|Subtract/,\r\n            isInputCharValid = validCharRegExp.test(ch);\r\n        if (!isInputCharValid) {\r\n            if (e.metaKey || e.ctrlKey || e.key && inArray(e.key, FIREFOX_CONTROL_KEYS) >= 0) {\r\n                return\r\n            }\r\n            e.preventDefault();\r\n            return false\r\n        }\r\n        this._keyPressed = true\r\n    },\r\n    _renderMouseWheelHandler: function() {\r\n        var eventName = eventUtils.addNamespace(wheelEvent.name, this.NAME);\r\n        var mouseWheelAction = this._createAction(function(e) {\r\n            this._mouseWheelHandler(e.event)\r\n        }.bind(this));\r\n        eventsEngine.off(this._input(), eventName);\r\n        eventsEngine.on(this._input(), eventName, function(e) {\r\n            mouseWheelAction({\r\n                event: e\r\n            })\r\n        })\r\n    },\r\n    _mouseWheelHandler: function(dxEvent) {\r\n        if (!focused(this._input())) {\r\n            return\r\n        }\r\n        dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent);\r\n        dxEvent.preventDefault();\r\n        dxEvent.stopPropagation()\r\n    },\r\n    _renderValue: function() {\r\n        var inputValue = this._input().val();\r\n        if (!inputValue.length || Number(inputValue) !== this.option(\"value\")) {\r\n            this._forceValueRender();\r\n            this._toggleEmptinessEventHandler()\r\n        }\r\n        var value = this.option(\"value\");\r\n        this._renderInputAddons();\r\n        this.setAria(\"valuenow\", value);\r\n        this.option(\"text\", this._input().val())\r\n    },\r\n    _renderValueEventName: function() {\r\n        return this.callBase() + \" keypress\"\r\n    },\r\n    _toggleDisabledState: function(value) {\r\n        if (this._$spinUp) {\r\n            SpinButton.getInstance(this._$spinUp).option(\"disabled\", value)\r\n        }\r\n        if (this._$spinDown) {\r\n            SpinButton.getInstance(this._$spinDown).option(\"disabled\", value)\r\n        }\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _forceValueRender: function() {\r\n        var value = this.option(\"value\"),\r\n            number = Number(value),\r\n            formattedValue = isNaN(number) ? \"\" : this._applyValueFormat(value);\r\n        this._renderDisplayText(formattedValue)\r\n    },\r\n    _applyValueFormat: function(value) {\r\n        return this.option(\"valueFormat\")(value)\r\n    },\r\n    _renderProps: function() {\r\n        this.callBase();\r\n        this._input().prop({\r\n            min: this.option(\"min\"),\r\n            max: this.option(\"max\"),\r\n            step: this.option(\"step\")\r\n        });\r\n        this.setAria({\r\n            valuemin: this.option(\"min\") || \"undefined\",\r\n            valuemax: this.option(\"max\") || \"undefined\"\r\n        })\r\n    },\r\n    _renderInputAddons: function() {\r\n        this.callBase();\r\n        this._renderSpinButtons()\r\n    },\r\n    _renderSpinButtons: function() {\r\n        var spinButtonsVisible = this.option(\"showSpinButtons\");\r\n        this.$element().toggleClass(SPIN_CLASS, spinButtonsVisible);\r\n        this._toggleTouchFriendlyClass();\r\n        if (!spinButtonsVisible) {\r\n            this._$spinContainer && this._$spinContainer.remove();\r\n            this._$spinContainer = null;\r\n            return\r\n        }\r\n        if (!this._$spinContainer) {\r\n            this._$spinContainer = this._createSpinButtons()\r\n        }\r\n        this._$spinContainer.prependTo(this._buttonsContainer())\r\n    },\r\n    _toggleTouchFriendlyClass: function() {\r\n        this.$element().toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, this.option(\"showSpinButtons\") && this.option(\"useLargeSpinButtons\"))\r\n    },\r\n    _createSpinButtons: function() {\r\n        var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME);\r\n        var pointerDownAction = this._createAction(this._spinButtonsPointerDownHandler.bind(this));\r\n        var $spinContainer = $(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\r\n        eventsEngine.off($spinContainer, eventName);\r\n        eventsEngine.on($spinContainer, eventName, function(e) {\r\n            pointerDownAction({\r\n                event: e\r\n            })\r\n        });\r\n        this._$spinUp = $(\"<div>\").appendTo($spinContainer);\r\n        this._createComponent(this._$spinUp, SpinButton, {\r\n            direction: \"up\",\r\n            onChange: this._spinUpChangeHandler.bind(this)\r\n        });\r\n        this._$spinDown = $(\"<div>\").appendTo($spinContainer);\r\n        this._createComponent(this._$spinDown, SpinButton, {\r\n            direction: \"down\",\r\n            onChange: this._spinDownChangeHandler.bind(this)\r\n        });\r\n        return $spinContainer\r\n    },\r\n    _spinButtonsPointerDownHandler: function() {\r\n        var $input = this._input();\r\n        if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\r\n            eventsEngine.trigger($input, \"focus\")\r\n        }\r\n    },\r\n    _spinUpChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(1, e.event || e)\r\n        }\r\n    },\r\n    _spinDownChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(-1, e.event || e)\r\n        }\r\n    },\r\n    _spinValueChange: function(sign, dxEvent) {\r\n        var value = parseFloat(this._normalizeInputValue()) || 0,\r\n            step = parseFloat(this.option(\"step\"));\r\n        value = this._correctRounding(value, step * sign);\r\n        var min = this.option(\"min\"),\r\n            max = this.option(\"max\");\r\n        if (void 0 !== min) {\r\n            value = Math.max(min, value)\r\n        }\r\n        if (void 0 !== max) {\r\n            value = Math.min(max, value)\r\n        }\r\n        this._saveValueChangeEvent(dxEvent);\r\n        this.option(\"value\", value)\r\n    },\r\n    _correctRounding: function(value, step) {\r\n        var regex = /[,.](.*)/;\r\n        var isFloatValue = regex.test(value),\r\n            isFloatStep = regex.test(step);\r\n        if (isFloatValue || isFloatStep) {\r\n            var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0,\r\n                stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0,\r\n                accuracy = math.max(valueAccuracy, stepAccuracy);\r\n            value = this._round(value + step, accuracy);\r\n            return value\r\n        }\r\n        return value + step\r\n    },\r\n    _round: function(value, precision) {\r\n        precision = precision || 0;\r\n        var multiplier = Math.pow(10, precision);\r\n        value *= multiplier;\r\n        value = Math.round(value) / multiplier;\r\n        return value\r\n    },\r\n    _renderValueChangeEvent: function() {\r\n        this.callBase();\r\n        eventsEngine.on(this._input(), \"focusout\", this._forceRefreshInputValue.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (\"number\" === this.option(\"mode\")) {\r\n            return\r\n        }\r\n        var $input = this._input(),\r\n            formattedValue = this._applyValueFormat(this.option(\"value\"));\r\n        $input.val(null);\r\n        $input.val(formattedValue)\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        var $input = this._input(),\r\n            inputValue = this._normalizeText(),\r\n            value = this._parseValue(inputValue),\r\n            valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\r\n        if (this._isValueValid() && !this._validateValue(value)) {\r\n            $input.val(this._applyValueFormat(value));\r\n            return\r\n        }\r\n        if (valueHasDigits) {\r\n            this.callBase(e, isNaN(value) ? null : value)\r\n        }\r\n        this._applyValueBoundaries(inputValue, value);\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        })\r\n    },\r\n    _applyValueBoundaries: function(inputValue, parsedValue) {\r\n        var isValueIncomplete = this._isValueIncomplete(inputValue),\r\n            isValueCorrect = this._isValueInRange(inputValue);\r\n        if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\r\n            if (Number(inputValue) !== parsedValue) {\r\n                this._input().val(this._applyValueFormat(parsedValue))\r\n            }\r\n        }\r\n    },\r\n    _replaceCommaWithPoint: function(value) {\r\n        return value.replace(\",\", \".\")\r\n    },\r\n    _inputIsInvalid: function() {\r\n        var isNumberMode = \"number\" === this.option(\"mode\");\r\n        var validityState = this._input().get(0).validity;\r\n        return isNumberMode && validityState && validityState.badInput\r\n    },\r\n    _renderDisplayText: function(text) {\r\n        if (this._inputIsInvalid()) {\r\n            return\r\n        }\r\n        this.callBase(text)\r\n    },\r\n    _isValueIncomplete: function(value) {\r\n        var incompleteRegex = /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i;\r\n        return incompleteRegex.test(value)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        return mathUtils.inRange(value, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _isNumber: function(value) {\r\n        return null !== this._parseValue(value)\r\n    },\r\n    _validateValue: function(value) {\r\n        var inputValue = this._normalizeText(),\r\n            isValueValid = this._isValueValid(),\r\n            isValid = true,\r\n            isNumber = this._isNumber(inputValue);\r\n        if (isNaN(Number(value))) {\r\n            isValid = false\r\n        }\r\n        if (!value && isValueValid) {\r\n            isValid = true\r\n        } else {\r\n            if (!isNumber && !isValueValid) {\r\n                isValid = false\r\n            }\r\n        }\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"invalidValueMessage\")\r\n            }\r\n        });\r\n        return isValid\r\n    },\r\n    _normalizeInputValue: function() {\r\n        return this._parseValue(this._normalizeText())\r\n    },\r\n    _normalizeText: function() {\r\n        var value = this._input().val().trim();\r\n        return this._replaceCommaWithPoint(value)\r\n    },\r\n    _parseValue: function(value) {\r\n        var number = parseFloat(value);\r\n        if (isNaN(number)) {\r\n            return null\r\n        }\r\n        return mathUtils.fitIntoRange(number, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    reset: function() {\r\n        this.option(\"value\", null)\r\n    },\r\n    _clean: function() {\r\n        delete this._$spinContainer;\r\n        delete this._$spinUp;\r\n        delete this._$spinDown;\r\n        this.callBase()\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._validateValue(args.value);\r\n                this._setSubmitValue(args.value);\r\n                this.callBase(args);\r\n                this._resumeValueChangeAction();\r\n                break;\r\n            case \"step\":\r\n                this._renderProps();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._renderProps();\r\n                this.option(\"value\", this._parseValue(this.option(\"value\")));\r\n                break;\r\n            case \"showSpinButtons\":\r\n                this._renderInputAddons();\r\n                break;\r\n            case \"useLargeSpinButtons\":\r\n                this._toggleTouchFriendlyClass();\r\n                break;\r\n            case \"invalidValueMessage\":\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = NumberBoxBase;\r\n\n\n/***/ }),\n\n/***/ 757:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\r\n * DevExtreme (ui/number_box/number_box.spin.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\r\nvar $ = __webpack_require__(1),\r\n    domAdapter = __webpack_require__(11),\r\n    eventsEngine = __webpack_require__(7),\r\n    Widget = __webpack_require__(43),\r\n    extend = __webpack_require__(3).extend,\r\n    eventUtils = __webpack_require__(8),\r\n    pointerEvents = __webpack_require__(31),\r\n    feedbackEvents = __webpack_require__(144),\r\n    holdEvent = __webpack_require__(203),\r\n    Deferred = __webpack_require__(10).Deferred;\r\nvar SPIN_CLASS = \"dx-numberbox-spin\",\r\n    SPIN_BUTTON_CLASS = \"dx-numberbox-spin-button\",\r\n    SPIN_HOLD_DELAY = 100,\r\n    NUMBER_BOX = \"dxNumberBox\",\r\n    POINTERUP_EVENT_NAME = eventUtils.addNamespace(pointerEvents.up, NUMBER_BOX),\r\n    POINTERCANCEL_EVENT_NAME = eventUtils.addNamespace(pointerEvents.cancel, NUMBER_BOX);\r\nvar SpinButton = Widget.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            direction: \"up\",\r\n            onChange: null,\r\n            activeStateEnabled: true,\r\n            hoverStateEnabled: true\r\n        })\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase();\r\n        var direction = SPIN_CLASS + \"-\" + this.option(\"direction\");\r\n        this.$element().addClass(SPIN_BUTTON_CLASS).addClass(direction);\r\n        this._spinIcon = $(\"<div>\").addClass(direction + \"-icon\").appendTo(this.$element())\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME),\r\n            $element = this.$element();\r\n        eventsEngine.off($element, eventName);\r\n        eventsEngine.on($element, eventName, this._spinDownHandler.bind(this));\r\n        this._spinChangeHandler = this._createActionByOption(\"onChange\")\r\n    },\r\n    _spinDownHandler: function(e) {\r\n        e.preventDefault();\r\n        this._clearTimer();\r\n        eventsEngine.on(this.$element(), holdEvent.name, function() {\r\n            this._feedBackDeferred = new Deferred;\r\n            feedbackEvents.lock(this._feedBackDeferred);\r\n            this._spinChangeHandler({\r\n                event: e\r\n            });\r\n            this._holdTimer = setInterval(this._spinChangeHandler, SPIN_HOLD_DELAY, {\r\n                event: e\r\n            })\r\n        }.bind(this));\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.on(document, POINTERUP_EVENT_NAME, this._clearTimer.bind(this));\r\n        eventsEngine.on(document, POINTERCANCEL_EVENT_NAME, this._clearTimer.bind(this));\r\n        this._spinChangeHandler({\r\n            event: e\r\n        })\r\n    },\r\n    _dispose: function() {\r\n        this._clearTimer();\r\n        this.callBase()\r\n    },\r\n    _clearTimer: function() {\r\n        eventsEngine.off(this.$element(), holdEvent.name);\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.off(document, POINTERUP_EVENT_NAME);\r\n        eventsEngine.off(document, POINTERCANCEL_EVENT_NAME);\r\n        if (this._feedBackDeferred) {\r\n            this._feedBackDeferred.resolve()\r\n        }\r\n        if (this._holdTimer) {\r\n            clearInterval(this._holdTimer)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"onChange\":\r\n            case \"direction\":\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = SpinButton;\r\n\n\n/***/ }),\n\n/***/ 907:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/*!\n * devextreme-react\n * Version: 18.2.2-beta.1\n * Build date: Thu Oct 25 2018\n *\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar number_box_1 = __webpack_require__(745);\nvar prop_types_1 = __webpack_require__(36);\nvar component_1 = __webpack_require__(39);\nvar nested_option_1 = __webpack_require__(80);\nvar NumberBox = /** @class */ (function (_super) {\n    __extends(NumberBox, _super);\n    function NumberBox() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._WidgetClass = number_box_1.default;\n        _this._defaults = {\n            defaultValue: \"value\"\n        };\n        return _this;\n    }\n    Object.defineProperty(NumberBox.prototype, \"instance\", {\n        get: function () {\n            return this._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NumberBox;\n}(component_1.Component));\nexports.NumberBox = NumberBox;\nNumberBox.propTypes = {\n    accessKey: prop_types_1.PropTypes.string,\n    activeStateEnabled: prop_types_1.PropTypes.bool,\n    disabled: prop_types_1.PropTypes.bool,\n    elementAttr: prop_types_1.PropTypes.object,\n    focusStateEnabled: prop_types_1.PropTypes.bool,\n    format: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.object,\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.string\n    ]),\n    height: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.number,\n        prop_types_1.PropTypes.string\n    ]),\n    hint: prop_types_1.PropTypes.string,\n    hoverStateEnabled: prop_types_1.PropTypes.bool,\n    inputAttr: prop_types_1.PropTypes.object,\n    invalidValueMessage: prop_types_1.PropTypes.string,\n    isValid: prop_types_1.PropTypes.bool,\n    max: prop_types_1.PropTypes.number,\n    min: prop_types_1.PropTypes.number,\n    mode: prop_types_1.PropTypes.oneOf([\n        \"number\",\n        \"text\",\n        \"tel\"\n    ]),\n    name: prop_types_1.PropTypes.string,\n    onChange: prop_types_1.PropTypes.func,\n    onContentReady: prop_types_1.PropTypes.func,\n    onCopy: prop_types_1.PropTypes.func,\n    onCut: prop_types_1.PropTypes.func,\n    onDisposing: prop_types_1.PropTypes.func,\n    onEnterKey: prop_types_1.PropTypes.func,\n    onFocusIn: prop_types_1.PropTypes.func,\n    onFocusOut: prop_types_1.PropTypes.func,\n    onInitialized: prop_types_1.PropTypes.func,\n    onInput: prop_types_1.PropTypes.func,\n    onKeyDown: prop_types_1.PropTypes.func,\n    onKeyPress: prop_types_1.PropTypes.func,\n    onKeyUp: prop_types_1.PropTypes.func,\n    onOptionChanged: prop_types_1.PropTypes.func,\n    onPaste: prop_types_1.PropTypes.func,\n    onValueChanged: prop_types_1.PropTypes.func,\n    placeholder: prop_types_1.PropTypes.string,\n    readOnly: prop_types_1.PropTypes.bool,\n    rtlEnabled: prop_types_1.PropTypes.bool,\n    showClearButton: prop_types_1.PropTypes.bool,\n    showSpinButtons: prop_types_1.PropTypes.bool,\n    step: prop_types_1.PropTypes.number,\n    stylingMode: prop_types_1.PropTypes.oneOf([\n        \"outlined\",\n        \"underlined\",\n        \"filled\"\n    ]),\n    tabIndex: prop_types_1.PropTypes.number,\n    text: prop_types_1.PropTypes.string,\n    useLargeSpinButtons: prop_types_1.PropTypes.bool,\n    validationError: prop_types_1.PropTypes.object,\n    validationMessageMode: prop_types_1.PropTypes.oneOf([\n        \"always\",\n        \"auto\"\n    ]),\n    value: prop_types_1.PropTypes.number,\n    valueChangeEvent: prop_types_1.PropTypes.string,\n    visible: prop_types_1.PropTypes.bool,\n    width: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.number,\n        prop_types_1.PropTypes.string\n    ])\n};\n// tslint:disable:max-classes-per-file\n// owners:\n// NumberBox\nvar Format = /** @class */ (function (_super) {\n    __extends(Format, _super);\n    function Format() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Format.OptionName = \"format\";\n    return Format;\n}(nested_option_1.default));\nexports.Format = Format;\nexports.default = NumberBox;\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/8.chunk.js","/*!\n * devextreme-react\n * Version: 18.2.2-beta.1\n * Build date: Thu Oct 25 2018\n *\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/** @deprecated Use 'devextreme-vue/number-box' file instead */\n__export(require(\"../number-box\"));\nvar number_box_1 = require(\"../number-box\");\nexports.default = number_box_1.default;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme-react/ui/number-box.js\n// module id = 723\n// module chunks = 8","/**\r\n * DevExtreme (ui/number_box.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nmodule.exports = require(\"./number_box/number_box\");\r\nmodule.exports.default = module.exports;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box.js\n// module id = 745\n// module chunks = 1 3 4 5 8","/**\r\n * DevExtreme (ui/number_box/number_box.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar registerComponent = require(\"../../core/component_registrator\"),\r\n    NumberBoxMask = require(\"./number_box.mask\");\r\nregisterComponent(\"dxNumberBox\", NumberBoxMask);\r\nmodule.exports = NumberBoxMask;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.js\n// module id = 753\n// module chunks = 1 3 4 5 8","/**\r\n * DevExtreme (ui/number_box/number_box.mask.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar eventsEngine = require(\"../../events/core/events_engine\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    isNumeric = require(\"../../core/utils/type\").isNumeric,\r\n    browser = require(\"../../core/utils/browser\"),\r\n    fitIntoRange = require(\"../../core/utils/math\").fitIntoRange,\r\n    inRange = require(\"../../core/utils/math\").inRange,\r\n    escapeRegExp = require(\"../../core/utils/common\").escapeRegExp,\r\n    number = require(\"../../localization/number\"),\r\n    maskCaret = require(\"./number_box.caret\"),\r\n    getLDMLFormat = require(\"../../localization/ldml/number\").getFormat,\r\n    NumberBoxBase = require(\"./number_box.base\"),\r\n    eventUtils = require(\"../../events/utils\"),\r\n    typeUtils = require(\"../../core/utils/type\");\r\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\",\r\n    MOVE_FORWARD = 1,\r\n    MOVE_BACKWARD = -1,\r\n    MINUS = \"-\",\r\n    NUMPUD_MINUS_KEY_IE = \"Subtract\",\r\n    INPUT_EVENT = \"input\";\r\nvar ensureDefined = function(value, defaultValue) {\r\n    return void 0 === value ? defaultValue : value\r\n};\r\nvar NumberBoxMask = NumberBoxBase.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            useMaskBehavior: true,\r\n            format: null\r\n        })\r\n    },\r\n    _isDeleteKey: function(key) {\r\n        return \"Delete\" === key || \"Del\" === key\r\n    },\r\n    _supportedKeys: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n        var that = this;\r\n        return extend(this.callBase(), {\r\n            minus: that._revertSign.bind(that),\r\n            del: that._removeHandler.bind(that),\r\n            backspace: that._removeHandler.bind(that),\r\n            leftArrow: that._arrowHandler.bind(that, MOVE_BACKWARD),\r\n            rightArrow: that._arrowHandler.bind(that, MOVE_FORWARD),\r\n            home: that._moveCaretToBoundary.bind(that, MOVE_FORWARD),\r\n            enter: that._updateFormattedValue.bind(that),\r\n            end: that._moveCaretToBoundary.bind(that, MOVE_BACKWARD)\r\n        })\r\n    },\r\n    _focusInHandler: function(e) {\r\n        this.callBase(e);\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            return\r\n        }\r\n        if (browser.msie) {\r\n            clearTimeout(this._ieCaretTimeout);\r\n            this._ieCaretTimeout = setTimeout(this._moveCaretToBoundary.bind(this, MOVE_BACKWARD, e))\r\n        } else {\r\n            this._moveCaretToBoundary(MOVE_BACKWARD, e)\r\n        }\r\n    },\r\n    _focusOutHandler: function(e) {\r\n        this._focusOutOccurs = true;\r\n        if (this._useMaskBehavior()) {\r\n            this._updateFormattedValue()\r\n        }\r\n        this.callBase(e);\r\n        this._focusOutOccurs = false\r\n    },\r\n    _updateFormattedValue: function() {\r\n        this._parsedValue = this._tryParse(this._getInputVal(), this._caret());\r\n        this._adjustParsedValue();\r\n        this._setTextByParsedValue();\r\n        if (this._isValueDirty()) {\r\n            this._isDirty = false;\r\n            eventsEngine.trigger(this._input(), \"change\")\r\n        }\r\n    },\r\n    _isValueDirty: function() {\r\n        return this._isDirty || this._parsedValue !== this.option(\"value\")\r\n    },\r\n    _arrowHandler: function(step, e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var text = this._getInputVal(),\r\n            format = this._getFormatPattern(),\r\n            nextCaret = maskCaret.getCaretWithOffset(this._caret(), step);\r\n        if (!maskCaret.isCaretInBoundaries(nextCaret, text, format)) {\r\n            nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\r\n            e.preventDefault();\r\n            this._caret(maskCaret.getCaretInBoundaries(nextCaret, text, format))\r\n        }\r\n    },\r\n    _moveCaretToBoundary: function(direction, e) {\r\n        if (!this._useMaskBehavior() || e.shiftKey) {\r\n            return\r\n        }\r\n        var boundaries = maskCaret.getCaretBoundaries(this._getInputVal(), this._getFormatPattern()),\r\n            newCaret = maskCaret.getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\r\n        this._caret(newCaret);\r\n        e && e.preventDefault()\r\n    },\r\n    _shouldMoveCaret: function(text, caret) {\r\n        var decimalSeparator = number.getDecimalSeparator(),\r\n            isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator,\r\n            isZeroNext = \"0\" === text.charAt(caret.end),\r\n            moveToFloat = this._lastKey === decimalSeparator && isDecimalSeparatorNext,\r\n            zeroToZeroReplace = \"0\" === this._lastKey && isZeroNext;\r\n        return moveToFloat || zeroToZeroReplace\r\n    },\r\n    _getInputVal: function() {\r\n        return number.convertDigits(this._input().val(), true)\r\n    },\r\n    _keyboardHandler: function(e) {\r\n        this._lastKey = number.convertDigits(e.originalEvent.key, true);\r\n        if (!this._shouldHandleKey(e.originalEvent)) {\r\n            return this.callBase(e)\r\n        }\r\n        var text = this._getInputVal(),\r\n            caret = this._caret();\r\n        var enteredChar = this._lastKey === MINUS ? \"\" : this._lastKey,\r\n            newValue = this._tryParse(text, caret, enteredChar);\r\n        if (void 0 === newValue) {\r\n            if (this._lastKey !== MINUS) {\r\n                e.originalEvent.preventDefault()\r\n            }\r\n            if (this._shouldMoveCaret(text, caret)) {\r\n                this._moveCaret(1)\r\n            }\r\n        } else {\r\n            this._parsedValue = newValue\r\n        }\r\n        return this.callBase(e)\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _removeHandler: function(e) {\r\n        var caret = this._caret(),\r\n            text = this._getInputVal(),\r\n            start = caret.start,\r\n            end = caret.end;\r\n        this._lastKey = e.key;\r\n        if (caret.start === caret.end) {\r\n            this._isDeleteKey(e.key) ? end++ : start--\r\n        }\r\n        var char = text.slice(start, end);\r\n        if (this._isStub(char)) {\r\n            this._moveCaret(this._isDeleteKey(e.key) ? 1 : -1);\r\n            if (this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0)) {\r\n                this._revertSign(e);\r\n                this._setTextByParsedValue()\r\n            }\r\n            e.preventDefault();\r\n            return\r\n        }\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        if (char === decimalSeparator) {\r\n            var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n            if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\r\n                this._moveCaret(this._isDeleteKey(e.key) ? 1 : -1);\r\n                e.preventDefault()\r\n            }\r\n            return\r\n        }\r\n        if (end - start < text.length) {\r\n            var editedText = this._replaceSelectedText(text, {\r\n                    start: start,\r\n                    end: end\r\n                }, \"\"),\r\n                noDigits = editedText.search(/[0-9]/) < 0;\r\n            if (noDigits && this._isValueInRange(0)) {\r\n                this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -(1 / 0) ? -0 : 0;\r\n                return\r\n            }\r\n        }\r\n        var valueAfterRemoving = this._tryParse(text, {\r\n            start: start,\r\n            end: end\r\n        }, \"\");\r\n        if (void 0 === valueAfterRemoving) {\r\n            e.preventDefault()\r\n        } else {\r\n            this._parsedValue = valueAfterRemoving\r\n        }\r\n    },\r\n    _isPercentFormat: function() {\r\n        var format = this._getFormatPattern(),\r\n            noEscapedFormat = format.replace(/'[^']+'/g, \"\");\r\n        return noEscapedFormat.indexOf(\"%\") !== -1\r\n    },\r\n    _parse: function(text, format) {\r\n        var formatOption = this.option(\"format\"),\r\n            isCustomParser = typeUtils.isFunction(formatOption.formatter),\r\n            parser = isCustomParser ? formatOption.parser : number.parse;\r\n        return parser(text, format)\r\n    },\r\n    _format: function(value, format) {\r\n        var formatOption = this.option(\"format\"),\r\n            isCustomFormatter = typeUtils.isFunction(formatOption.formatter),\r\n            formatter = isCustomFormatter ? formatOption.formatter : number.format;\r\n        return formatter(value, format)\r\n    },\r\n    _getFormatPattern: function() {\r\n        var format = this.option(\"format\"),\r\n            isLDMLPattern = \"string\" === typeof format && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\r\n        if (isLDMLPattern) {\r\n            return format\r\n        } else {\r\n            return getLDMLFormat(function(value) {\r\n                return this._format(value, format)\r\n            }.bind(this))\r\n        }\r\n    },\r\n    _getFormatForSign: function(text) {\r\n        var format = this._getFormatPattern(),\r\n            signParts = format.split(\";\"),\r\n            sign = number.getSign(text, format);\r\n        signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n        return sign < 0 ? signParts[1] : signParts[0]\r\n    },\r\n    _removeStubs: function(text, excludeComma) {\r\n        var format = this._getFormatForSign(text),\r\n            thousandsSeparator = number.getThousandsSeparator(),\r\n            stubs = format.replace(/[#0.,]/g, \"\"),\r\n            regExp = new RegExp(\"[-\" + escapeRegExp((excludeComma ? \"\" : thousandsSeparator) + stubs) + \"]\", \"g\");\r\n        return text.replace(regExp, \"\")\r\n    },\r\n    _truncateToPrecision: function(value, decimalSeparator, maxPrecision) {\r\n        if (typeUtils.isDefined(value)) {\r\n            var strValue = value.toString(),\r\n                decimalSeparatorIndex = strValue.indexOf(decimalSeparator);\r\n            if (strValue && decimalSeparatorIndex > -1) {\r\n                var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\r\n                return isNaN(parsedValue) ? value : parsedValue\r\n            }\r\n        }\r\n        return value\r\n    },\r\n    _tryParse: function(text, selection, char) {\r\n        var editedText = this._replaceSelectedText(text, selection, char),\r\n            format = this._getFormatPattern(),\r\n            isTextSelected = selection.start !== selection.end,\r\n            parsed = this._parse(editedText, format),\r\n            maxPrecision = this._getPrecisionLimits(format, editedText).max,\r\n            isValueChanged = parsed !== this._parsedValue,\r\n            decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision,\r\n            isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\r\n        if (isDecimalPointRestricted || isUselessCharRestricted) {\r\n            return\r\n        }\r\n        if (\"\" === editedText) {\r\n            parsed = 0\r\n        }\r\n        if (isNaN(parsed)) {\r\n            return\r\n        }\r\n        var value = null === parsed ? this._parsedValue : parsed;\r\n        parsed = this._truncateToPrecision(value, decimalSeparator, maxPrecision);\r\n        return this._isPercentFormat() ? parsed && parsed / 100 : parsed\r\n    },\r\n    _isValueIncomplete: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        var caret = this._caret(),\r\n            point = number.getDecimalSeparator(),\r\n            pointIndex = text.indexOf(point),\r\n            isCaretOnFloat = pointIndex > 0 && pointIndex < caret.start,\r\n            textParts = this._removeStubs(text, true).split(point);\r\n        if (!isCaretOnFloat || 2 !== textParts.length) {\r\n            return false\r\n        }\r\n        var floatLength = textParts[1].length,\r\n            precision = this._getPrecisionLimits(this._getFormatPattern(), text),\r\n            isPrecisionInRange = inRange(floatLength, precision.min, precision.max),\r\n            endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\r\n        return isPrecisionInRange && (endsWithZero || !floatLength)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        var min = ensureDefined(this.option(\"min\"), -(1 / 0)),\r\n            max = ensureDefined(this.option(\"max\"), 1 / 0);\r\n        return inRange(value, min, max)\r\n    },\r\n    _setInputText: function(text) {\r\n        var newCaret = maskCaret.getCaretAfterFormat(this._getInputVal(), text, this._caret(), this._getFormatPattern()),\r\n            newValue = number.convertDigits(text);\r\n        if (this._formattedValue !== newValue) {\r\n            this._isDirty = true\r\n        }\r\n        this._input().val(newValue);\r\n        this._toggleEmptinessEventHandler();\r\n        this._formattedValue = text;\r\n        if (!this._focusOutOccurs) {\r\n            this._caret(newCaret)\r\n        }\r\n    },\r\n    _useMaskBehavior: function() {\r\n        return !!this.option(\"format\") && this.option(\"useMaskBehavior\")\r\n    },\r\n    _renderInputType: function() {\r\n        var isNumberType = \"number\" === this.option(\"mode\");\r\n        if (this._useMaskBehavior() && isNumberType) {\r\n            this._setInputType(\"tel\")\r\n        } else {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _isChar: function(str) {\r\n        return \"string\" === typeof str && 1 === str.length\r\n    },\r\n    _moveCaret: function(offset) {\r\n        if (!offset) {\r\n            return\r\n        }\r\n        var newCaret = maskCaret.getCaretWithOffset(this._caret(), offset),\r\n            adjustedCaret = maskCaret.getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\r\n        this._caret(adjustedCaret)\r\n    },\r\n    _shouldHandleKey: function(e) {\r\n        var isSpecialChar = e.ctrlKey || e.shiftKey || e.altKey || !this._isChar(e.key),\r\n            isMinusKey = e.key === MINUS,\r\n            useMaskBehavior = this._useMaskBehavior();\r\n        return useMaskBehavior && !isSpecialChar && !isMinusKey\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._renderFormatter()\r\n    },\r\n    _renderFormatter: function() {\r\n        this._clearCache();\r\n        this._detachFormatterEvents();\r\n        if (this._useMaskBehavior()) {\r\n            this._attachFormatterEvents()\r\n        }\r\n    },\r\n    _detachFormatterEvents: function() {\r\n        eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE)\r\n    },\r\n    _attachFormatterEvents: function() {\r\n        var $input = this._input();\r\n        eventsEngine.on($input, eventUtils.addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), this._formatValue.bind(this));\r\n        eventsEngine.on($input, eventUtils.addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n            this._caret(maskCaret.getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()))\r\n        }.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n    },\r\n    _isNonStubAfter: function(index, text) {\r\n        text = (text || this._getInputVal()).slice(index);\r\n        return text && !this._isStub(text, true)\r\n    },\r\n    _isStub: function(str, isString) {\r\n        var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator()),\r\n            regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\",\r\n            stubRegExp = new RegExp(regExpString, \"g\");\r\n        return stubRegExp.test(str) && (isString || this._isChar(str))\r\n    },\r\n    _parseValue: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        return this._parsedValue\r\n    },\r\n    _getPrecisionLimits: function(text) {\r\n        var currentFormat = this._getFormatForSign(text),\r\n            floatPart = (currentFormat.split(\".\")[1] || \"\").replace(/[^#0]/g, \"\"),\r\n            minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length,\r\n            maxPrecision = floatPart.length;\r\n        return {\r\n            min: minPrecision,\r\n            max: maxPrecision\r\n        }\r\n    },\r\n    _revertSign: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            if (e.key === MINUS || e.key === NUMPUD_MINUS_KEY_IE) {\r\n                this._applyRevertedSign(e, caret, true);\r\n                return\r\n            } else {\r\n                this._caret(maskCaret.getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()))\r\n            }\r\n        }\r\n        this._applyRevertedSign(e, caret)\r\n    },\r\n    _applyRevertedSign: function(e, caret, preserveSelectedText) {\r\n        var newValue = -1 * ensureDefined(this._parsedValue, null);\r\n        if (this._isValueInRange(newValue)) {\r\n            this._parsedValue = newValue;\r\n            if (preserveSelectedText) {\r\n                var format = this._getFormatPattern(),\r\n                    previousText = this._getInputVal();\r\n                this._setTextByParsedValue();\r\n                e.preventDefault();\r\n                var currentText = this._getInputVal(),\r\n                    offset = maskCaret.getCaretOffset(previousText, currentText, format);\r\n                caret = maskCaret.getCaretWithOffset(caret, offset);\r\n                var caretInBoundaries = maskCaret.getCaretInBoundaries(caret, currentText, format);\r\n                if (browser.msie) {\r\n                    clearTimeout(this._ieCaretTimeout);\r\n                    this._ieCaretTimeout = setTimeout(this._caret.bind(this, caretInBoundaries))\r\n                } else {\r\n                    this._caret(caretInBoundaries)\r\n                }\r\n            }\r\n            if (e.key === NUMPUD_MINUS_KEY_IE) {\r\n                eventsEngine.trigger(this._input(), INPUT_EVENT)\r\n            }\r\n        }\r\n    },\r\n    _removeMinusFromText: function(text, caret) {\r\n        var isMinusPressed = this._lastKey === MINUS && text.charAt(caret.start - 1) === MINUS;\r\n        return isMinusPressed ? this._replaceSelectedText(text, {\r\n            start: caret.start - 1,\r\n            end: caret.start\r\n        }, \"\") : text\r\n    },\r\n    _setTextByParsedValue: function() {\r\n        var format = this._getFormatPattern(),\r\n            parsed = this._parseValue(),\r\n            formatted = this._format(parsed, format) || \"\";\r\n        this._setInputText(formatted)\r\n    },\r\n    _formatValue: function() {\r\n        var text = this._getInputVal(),\r\n            caret = this._caret(),\r\n            textWithoutMinus = this._removeMinusFromText(text, caret),\r\n            wasMinusRemoved = textWithoutMinus !== text;\r\n        this._isDirty = false;\r\n        text = textWithoutMinus;\r\n        if (this._isValueIncomplete(textWithoutMinus)) {\r\n            this._formattedValue = text;\r\n            if (wasMinusRemoved) {\r\n                this._setTextByParsedValue()\r\n            }\r\n            return\r\n        }\r\n        var textWasChanged = this._formattedValue !== text;\r\n        if (textWasChanged) {\r\n            var value = this._tryParse(text, caret, \"\");\r\n            if (typeUtils.isDefined(value)) {\r\n                this._parsedValue = value\r\n            }\r\n        }\r\n        this._setTextByParsedValue()\r\n    },\r\n    _renderDisplayText: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._toggleEmptinessEventHandler()\r\n        } else {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._parsedValue = this.option(\"value\");\r\n            this._setTextByParsedValue()\r\n        }\r\n        this.callBase()\r\n    },\r\n    _adjustParsedValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var clearedText = this._removeStubs(this._getInputVal()),\r\n            parsedValue = clearedText ? this._parseValue() : null;\r\n        if (!isNumeric(parsedValue)) {\r\n            this._parsedValue = parsedValue;\r\n            return\r\n        }\r\n        this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(e)\r\n        }\r\n        this._saveValueChangeEvent(e);\r\n        this._lastKey = null;\r\n        this._adjustParsedValue();\r\n        this.option(\"value\", this._parsedValue)\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"format\":\r\n            case \"useMaskBehavior\":\r\n                this._renderFormatter();\r\n                this._renderValue();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._adjustParsedValue();\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _optionValuesEqual: function(name, oldValue, newValue) {\r\n        if (\"value\" === name && 0 === oldValue && 0 === newValue) {\r\n            return 1 / oldValue === 1 / newValue\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    _clearCache: function() {\r\n        delete this._formattedValue;\r\n        delete this._lastKey;\r\n        delete this._parsedValue;\r\n        delete this._isDirty;\r\n        delete this._focusOutOccurs;\r\n        clearTimeout(this._ieCaretTimeout);\r\n        delete this._ieCaretTimeout\r\n    },\r\n    _clean: function() {\r\n        this._clearCache();\r\n        this.callBase()\r\n    }\r\n});\r\nmodule.exports = NumberBoxMask;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.mask.js\n// module id = 754\n// module chunks = 1 3 4 5 8","/**\r\n * DevExtreme (ui/number_box/number_box.caret.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar fitIntoRange = require(\"../../core/utils/math\").fitIntoRange,\r\n    escapeRegExp = require(\"../../core/utils/common\").escapeRegExp,\r\n    number = require(\"../../localization/number\");\r\nvar getCaretBoundaries = function(text, format) {\r\n    var signParts = format.split(\";\"),\r\n        sign = number.getSign(text, format);\r\n    signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n    format = sign < 0 ? signParts[1] : signParts[0];\r\n    var clearedFormat = format.replace(/'([^']*)'/g, \"$1\"),\r\n        result = /^([^#0\\.,]*)([#0\\.,]*)([^#0\\.,]*)$/.exec(clearedFormat);\r\n    var startBorder = result[1].length,\r\n        endBorder = text.length - result[3].length;\r\n    return {\r\n        start: startBorder,\r\n        end: endBorder\r\n    }\r\n};\r\nvar _getDigitCountBeforeIndex = function(index, text) {\r\n    var decimalSeparator = number.getDecimalSeparator(),\r\n        regExp = new RegExp(\"[^0-9\" + escapeRegExp(decimalSeparator) + \"]\", \"g\"),\r\n        textBeforePosition = text.slice(0, index);\r\n    return textBeforePosition.replace(regExp, \"\").length\r\n};\r\nvar _reverseText = function(text) {\r\n    return text.split(\"\").reverse().join(\"\")\r\n};\r\nvar _getDigitPositionByIndex = function(digitIndex, text) {\r\n    if (!digitIndex) {\r\n        return -1\r\n    }\r\n    var regExp = /[0-9]/g,\r\n        counter = 1,\r\n        index = null,\r\n        result = regExp.exec(text);\r\n    while (result) {\r\n        index = result.index;\r\n        if (!digitIndex || counter >= digitIndex) {\r\n            return index\r\n        }\r\n        counter++;\r\n        result = regExp.exec(text)\r\n    }\r\n    return null === index ? text.length : index\r\n};\r\nvar getCaretWithOffset = function(caret, offset) {\r\n    if (void 0 === caret.start) {\r\n        caret = {\r\n            start: caret,\r\n            end: caret\r\n        }\r\n    }\r\n    return {\r\n        start: caret.start + offset,\r\n        end: caret.end + offset\r\n    }\r\n};\r\nvar getCaretAfterFormat = function(text, formatted, caret, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var point = number.getDecimalSeparator(),\r\n        pointPosition = text.indexOf(point),\r\n        newPointPosition = formatted.indexOf(point),\r\n        textParts = text.split(point),\r\n        formattedParts = formatted.split(point),\r\n        isCaretOnFloat = pointPosition !== -1 && caret.start > pointPosition;\r\n    if (isCaretOnFloat) {\r\n        var relativeIndex = caret.start - pointPosition - 1,\r\n            digitsBefore = _getDigitCountBeforeIndex(relativeIndex, textParts[1]),\r\n            newPosition = formattedParts[1] ? newPointPosition + 1 + _getDigitPositionByIndex(digitsBefore, formattedParts[1]) + 1 : formatted.length;\r\n        return getCaretInBoundaries(newPosition, formatted, format)\r\n    } else {\r\n        var positionFromEnd = textParts[0].length - caret.start,\r\n            digitsFromEnd = _getDigitCountBeforeIndex(positionFromEnd, _reverseText(textParts[0])),\r\n            newPositionFromEnd = _getDigitPositionByIndex(digitsFromEnd, _reverseText(formattedParts[0])),\r\n            newPositionFromBegin = formattedParts[0].length - (newPositionFromEnd + 1);\r\n        return getCaretInBoundaries(newPositionFromBegin, formatted, format)\r\n    }\r\n};\r\nvar isCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretInBoundaries(caret, text, format);\r\n    return caret.start >= boundaries.start && caret.end <= boundaries.end\r\n};\r\nvar getCaretInBoundaries = function(caret, text, format) {\r\n    caret = getCaretWithOffset(caret, 0);\r\n    var boundaries = getCaretBoundaries(text, format),\r\n        adjustedCaret = {\r\n            start: fitIntoRange(caret.start, boundaries.start, boundaries.end),\r\n            end: fitIntoRange(caret.end, boundaries.start, boundaries.end)\r\n        };\r\n    return adjustedCaret\r\n};\r\nvar getCaretOffset = function(previousText, newText, format) {\r\n    var previousBoundaries = getCaretBoundaries(previousText, format),\r\n        newBoundaries = getCaretBoundaries(newText, format);\r\n    return newBoundaries.start - previousBoundaries.start\r\n};\r\nexports.getCaretBoundaries = getCaretBoundaries;\r\nexports.isCaretInBoundaries = isCaretInBoundaries;\r\nexports.getCaretWithOffset = getCaretWithOffset;\r\nexports.getCaretInBoundaries = getCaretInBoundaries;\r\nexports.getCaretAfterFormat = getCaretAfterFormat;\r\nexports.getCaretOffset = getCaretOffset;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.caret.js\n// module id = 755\n// module chunks = 1 3 4 5 8","/**\r\n * DevExtreme (ui/number_box/number_box.base.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    domAdapter = require(\"../../core/dom_adapter\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    commonUtils = require(\"../../core/utils/common\"),\r\n    mathUtils = require(\"../../core/utils/math\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    inArray = require(\"../../core/utils/array\").inArray,\r\n    focused = require(\"../widget/selectors\").focused,\r\n    devices = require(\"../../core/devices\"),\r\n    TextEditor = require(\"../text_box/ui.text_editor\"),\r\n    eventUtils = require(\"../../events/utils\"),\r\n    pointerEvents = require(\"../../events/pointer\"),\r\n    wheelEvent = require(\"../../events/core/wheel\"),\r\n    SpinButton = require(\"./number_box.spin\"),\r\n    messageLocalization = require(\"../../localization/message\");\r\nvar math = Math;\r\nvar WIDGET_CLASS = \"dx-numberbox\",\r\n    SPIN_CLASS = \"dx-numberbox-spin\",\r\n    SPIN_CONTAINER_CLASS = \"dx-numberbox-spin-container\",\r\n    SPIN_TOUCH_FRIENDLY_CLASS = \"dx-numberbox-spin-touch-friendly\";\r\nvar FIREFOX_CONTROL_KEYS = [\"Tab\", \"Del\", \"Delete\", \"Backspace\", \"Left\", \"ArrowLeft\", \"Right\", \"ArrowRight\", \"Home\", \"End\", \"Enter\"];\r\nvar NumberBoxBase = TextEditor.inherit({\r\n    _supportedKeys: function() {\r\n        return extend(this.callBase(), {\r\n            upArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinUpChangeHandler(e)\r\n            },\r\n            downArrow: function(e) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this._spinDownChangeHandler(e)\r\n            },\r\n            enter: function() {}\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: 0,\r\n            min: void 0,\r\n            max: void 0,\r\n            step: 1,\r\n            showSpinButtons: false,\r\n            useLargeSpinButtons: true,\r\n            mode: \"text\",\r\n            invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\")\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return devices.real().generic && !devices.isSimulator()\r\n            },\r\n            options: {\r\n                useLargeSpinButtons: false\r\n            }\r\n        }, {\r\n            device: function() {\r\n                return \"generic\" !== devices.real().platform\r\n            },\r\n            options: {\r\n                mode: \"number\"\r\n            }\r\n        }])\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderSubmitElement();\r\n        this.$element().addClass(WIDGET_CLASS);\r\n        this.callBase()\r\n    },\r\n    _renderContentImpl: function() {\r\n        this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\r\n        this.setAria(\"role\", \"spinbutton\");\r\n        this._renderMouseWheelHandler()\r\n    },\r\n    _renderSubmitElement: function() {\r\n        this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\r\n        this._setSubmitValue(this.option(\"value\"))\r\n    },\r\n    _setSubmitValue: function(value) {\r\n        this._$submitElement.val(commonUtils.applyServerDecimalSeparator(value))\r\n    },\r\n    _getSubmitElement: function() {\r\n        return this._$submitElement\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        this.callBase(e);\r\n        var ch = e.key || String.fromCharCode(e.which),\r\n            validCharRegExp = /[\\d.,eE\\-+]|Subtract/,\r\n            isInputCharValid = validCharRegExp.test(ch);\r\n        if (!isInputCharValid) {\r\n            if (e.metaKey || e.ctrlKey || e.key && inArray(e.key, FIREFOX_CONTROL_KEYS) >= 0) {\r\n                return\r\n            }\r\n            e.preventDefault();\r\n            return false\r\n        }\r\n        this._keyPressed = true\r\n    },\r\n    _renderMouseWheelHandler: function() {\r\n        var eventName = eventUtils.addNamespace(wheelEvent.name, this.NAME);\r\n        var mouseWheelAction = this._createAction(function(e) {\r\n            this._mouseWheelHandler(e.event)\r\n        }.bind(this));\r\n        eventsEngine.off(this._input(), eventName);\r\n        eventsEngine.on(this._input(), eventName, function(e) {\r\n            mouseWheelAction({\r\n                event: e\r\n            })\r\n        })\r\n    },\r\n    _mouseWheelHandler: function(dxEvent) {\r\n        if (!focused(this._input())) {\r\n            return\r\n        }\r\n        dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent);\r\n        dxEvent.preventDefault();\r\n        dxEvent.stopPropagation()\r\n    },\r\n    _renderValue: function() {\r\n        var inputValue = this._input().val();\r\n        if (!inputValue.length || Number(inputValue) !== this.option(\"value\")) {\r\n            this._forceValueRender();\r\n            this._toggleEmptinessEventHandler()\r\n        }\r\n        var value = this.option(\"value\");\r\n        this._renderInputAddons();\r\n        this.setAria(\"valuenow\", value);\r\n        this.option(\"text\", this._input().val())\r\n    },\r\n    _renderValueEventName: function() {\r\n        return this.callBase() + \" keypress\"\r\n    },\r\n    _toggleDisabledState: function(value) {\r\n        if (this._$spinUp) {\r\n            SpinButton.getInstance(this._$spinUp).option(\"disabled\", value)\r\n        }\r\n        if (this._$spinDown) {\r\n            SpinButton.getInstance(this._$spinDown).option(\"disabled\", value)\r\n        }\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _forceValueRender: function() {\r\n        var value = this.option(\"value\"),\r\n            number = Number(value),\r\n            formattedValue = isNaN(number) ? \"\" : this._applyValueFormat(value);\r\n        this._renderDisplayText(formattedValue)\r\n    },\r\n    _applyValueFormat: function(value) {\r\n        return this.option(\"valueFormat\")(value)\r\n    },\r\n    _renderProps: function() {\r\n        this.callBase();\r\n        this._input().prop({\r\n            min: this.option(\"min\"),\r\n            max: this.option(\"max\"),\r\n            step: this.option(\"step\")\r\n        });\r\n        this.setAria({\r\n            valuemin: this.option(\"min\") || \"undefined\",\r\n            valuemax: this.option(\"max\") || \"undefined\"\r\n        })\r\n    },\r\n    _renderInputAddons: function() {\r\n        this.callBase();\r\n        this._renderSpinButtons()\r\n    },\r\n    _renderSpinButtons: function() {\r\n        var spinButtonsVisible = this.option(\"showSpinButtons\");\r\n        this.$element().toggleClass(SPIN_CLASS, spinButtonsVisible);\r\n        this._toggleTouchFriendlyClass();\r\n        if (!spinButtonsVisible) {\r\n            this._$spinContainer && this._$spinContainer.remove();\r\n            this._$spinContainer = null;\r\n            return\r\n        }\r\n        if (!this._$spinContainer) {\r\n            this._$spinContainer = this._createSpinButtons()\r\n        }\r\n        this._$spinContainer.prependTo(this._buttonsContainer())\r\n    },\r\n    _toggleTouchFriendlyClass: function() {\r\n        this.$element().toggleClass(SPIN_TOUCH_FRIENDLY_CLASS, this.option(\"showSpinButtons\") && this.option(\"useLargeSpinButtons\"))\r\n    },\r\n    _createSpinButtons: function() {\r\n        var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME);\r\n        var pointerDownAction = this._createAction(this._spinButtonsPointerDownHandler.bind(this));\r\n        var $spinContainer = $(\"<div>\").addClass(SPIN_CONTAINER_CLASS);\r\n        eventsEngine.off($spinContainer, eventName);\r\n        eventsEngine.on($spinContainer, eventName, function(e) {\r\n            pointerDownAction({\r\n                event: e\r\n            })\r\n        });\r\n        this._$spinUp = $(\"<div>\").appendTo($spinContainer);\r\n        this._createComponent(this._$spinUp, SpinButton, {\r\n            direction: \"up\",\r\n            onChange: this._spinUpChangeHandler.bind(this)\r\n        });\r\n        this._$spinDown = $(\"<div>\").appendTo($spinContainer);\r\n        this._createComponent(this._$spinDown, SpinButton, {\r\n            direction: \"down\",\r\n            onChange: this._spinDownChangeHandler.bind(this)\r\n        });\r\n        return $spinContainer\r\n    },\r\n    _spinButtonsPointerDownHandler: function() {\r\n        var $input = this._input();\r\n        if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\r\n            eventsEngine.trigger($input, \"focus\")\r\n        }\r\n    },\r\n    _spinUpChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(1, e.event || e)\r\n        }\r\n    },\r\n    _spinDownChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(-1, e.event || e)\r\n        }\r\n    },\r\n    _spinValueChange: function(sign, dxEvent) {\r\n        var value = parseFloat(this._normalizeInputValue()) || 0,\r\n            step = parseFloat(this.option(\"step\"));\r\n        value = this._correctRounding(value, step * sign);\r\n        var min = this.option(\"min\"),\r\n            max = this.option(\"max\");\r\n        if (void 0 !== min) {\r\n            value = Math.max(min, value)\r\n        }\r\n        if (void 0 !== max) {\r\n            value = Math.min(max, value)\r\n        }\r\n        this._saveValueChangeEvent(dxEvent);\r\n        this.option(\"value\", value)\r\n    },\r\n    _correctRounding: function(value, step) {\r\n        var regex = /[,.](.*)/;\r\n        var isFloatValue = regex.test(value),\r\n            isFloatStep = regex.test(step);\r\n        if (isFloatValue || isFloatStep) {\r\n            var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0,\r\n                stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0,\r\n                accuracy = math.max(valueAccuracy, stepAccuracy);\r\n            value = this._round(value + step, accuracy);\r\n            return value\r\n        }\r\n        return value + step\r\n    },\r\n    _round: function(value, precision) {\r\n        precision = precision || 0;\r\n        var multiplier = Math.pow(10, precision);\r\n        value *= multiplier;\r\n        value = Math.round(value) / multiplier;\r\n        return value\r\n    },\r\n    _renderValueChangeEvent: function() {\r\n        this.callBase();\r\n        eventsEngine.on(this._input(), \"focusout\", this._forceRefreshInputValue.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (\"number\" === this.option(\"mode\")) {\r\n            return\r\n        }\r\n        var $input = this._input(),\r\n            formattedValue = this._applyValueFormat(this.option(\"value\"));\r\n        $input.val(null);\r\n        $input.val(formattedValue)\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        var $input = this._input(),\r\n            inputValue = this._normalizeText(),\r\n            value = this._parseValue(inputValue),\r\n            valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\r\n        if (this._isValueValid() && !this._validateValue(value)) {\r\n            $input.val(this._applyValueFormat(value));\r\n            return\r\n        }\r\n        if (valueHasDigits) {\r\n            this.callBase(e, isNaN(value) ? null : value)\r\n        }\r\n        this._applyValueBoundaries(inputValue, value);\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        })\r\n    },\r\n    _applyValueBoundaries: function(inputValue, parsedValue) {\r\n        var isValueIncomplete = this._isValueIncomplete(inputValue),\r\n            isValueCorrect = this._isValueInRange(inputValue);\r\n        if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\r\n            if (Number(inputValue) !== parsedValue) {\r\n                this._input().val(this._applyValueFormat(parsedValue))\r\n            }\r\n        }\r\n    },\r\n    _replaceCommaWithPoint: function(value) {\r\n        return value.replace(\",\", \".\")\r\n    },\r\n    _inputIsInvalid: function() {\r\n        var isNumberMode = \"number\" === this.option(\"mode\");\r\n        var validityState = this._input().get(0).validity;\r\n        return isNumberMode && validityState && validityState.badInput\r\n    },\r\n    _renderDisplayText: function(text) {\r\n        if (this._inputIsInvalid()) {\r\n            return\r\n        }\r\n        this.callBase(text)\r\n    },\r\n    _isValueIncomplete: function(value) {\r\n        var incompleteRegex = /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i;\r\n        return incompleteRegex.test(value)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        return mathUtils.inRange(value, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _isNumber: function(value) {\r\n        return null !== this._parseValue(value)\r\n    },\r\n    _validateValue: function(value) {\r\n        var inputValue = this._normalizeText(),\r\n            isValueValid = this._isValueValid(),\r\n            isValid = true,\r\n            isNumber = this._isNumber(inputValue);\r\n        if (isNaN(Number(value))) {\r\n            isValid = false\r\n        }\r\n        if (!value && isValueValid) {\r\n            isValid = true\r\n        } else {\r\n            if (!isNumber && !isValueValid) {\r\n                isValid = false\r\n            }\r\n        }\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"invalidValueMessage\")\r\n            }\r\n        });\r\n        return isValid\r\n    },\r\n    _normalizeInputValue: function() {\r\n        return this._parseValue(this._normalizeText())\r\n    },\r\n    _normalizeText: function() {\r\n        var value = this._input().val().trim();\r\n        return this._replaceCommaWithPoint(value)\r\n    },\r\n    _parseValue: function(value) {\r\n        var number = parseFloat(value);\r\n        if (isNaN(number)) {\r\n            return null\r\n        }\r\n        return mathUtils.fitIntoRange(number, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    reset: function() {\r\n        this.option(\"value\", null)\r\n    },\r\n    _clean: function() {\r\n        delete this._$spinContainer;\r\n        delete this._$spinUp;\r\n        delete this._$spinDown;\r\n        this.callBase()\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._validateValue(args.value);\r\n                this._setSubmitValue(args.value);\r\n                this.callBase(args);\r\n                this._resumeValueChangeAction();\r\n                break;\r\n            case \"step\":\r\n                this._renderProps();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._renderProps();\r\n                this.option(\"value\", this._parseValue(this.option(\"value\")));\r\n                break;\r\n            case \"showSpinButtons\":\r\n                this._renderInputAddons();\r\n                break;\r\n            case \"useLargeSpinButtons\":\r\n                this._toggleTouchFriendlyClass();\r\n                break;\r\n            case \"invalidValueMessage\":\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = NumberBoxBase;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.base.js\n// module id = 756\n// module chunks = 1 3 4 5 8","/**\r\n * DevExtreme (ui/number_box/number_box.spin.js)\r\n * Version: 18.2.2-pre-beta\r\n * Build date: Wed Oct 24 2018\r\n *\r\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../core/renderer\"),\r\n    domAdapter = require(\"../../core/dom_adapter\"),\r\n    eventsEngine = require(\"../../events/core/events_engine\"),\r\n    Widget = require(\"../widget/ui.widget\"),\r\n    extend = require(\"../../core/utils/extend\").extend,\r\n    eventUtils = require(\"../../events/utils\"),\r\n    pointerEvents = require(\"../../events/pointer\"),\r\n    feedbackEvents = require(\"../../events/core/emitter.feedback\"),\r\n    holdEvent = require(\"../../events/hold\"),\r\n    Deferred = require(\"../../core/utils/deferred\").Deferred;\r\nvar SPIN_CLASS = \"dx-numberbox-spin\",\r\n    SPIN_BUTTON_CLASS = \"dx-numberbox-spin-button\",\r\n    SPIN_HOLD_DELAY = 100,\r\n    NUMBER_BOX = \"dxNumberBox\",\r\n    POINTERUP_EVENT_NAME = eventUtils.addNamespace(pointerEvents.up, NUMBER_BOX),\r\n    POINTERCANCEL_EVENT_NAME = eventUtils.addNamespace(pointerEvents.cancel, NUMBER_BOX);\r\nvar SpinButton = Widget.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            direction: \"up\",\r\n            onChange: null,\r\n            activeStateEnabled: true,\r\n            hoverStateEnabled: true\r\n        })\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase();\r\n        var direction = SPIN_CLASS + \"-\" + this.option(\"direction\");\r\n        this.$element().addClass(SPIN_BUTTON_CLASS).addClass(direction);\r\n        this._spinIcon = $(\"<div>\").addClass(direction + \"-icon\").appendTo(this.$element())\r\n    },\r\n    _render: function() {\r\n        this.callBase();\r\n        var eventName = eventUtils.addNamespace(pointerEvents.down, this.NAME),\r\n            $element = this.$element();\r\n        eventsEngine.off($element, eventName);\r\n        eventsEngine.on($element, eventName, this._spinDownHandler.bind(this));\r\n        this._spinChangeHandler = this._createActionByOption(\"onChange\")\r\n    },\r\n    _spinDownHandler: function(e) {\r\n        e.preventDefault();\r\n        this._clearTimer();\r\n        eventsEngine.on(this.$element(), holdEvent.name, function() {\r\n            this._feedBackDeferred = new Deferred;\r\n            feedbackEvents.lock(this._feedBackDeferred);\r\n            this._spinChangeHandler({\r\n                event: e\r\n            });\r\n            this._holdTimer = setInterval(this._spinChangeHandler, SPIN_HOLD_DELAY, {\r\n                event: e\r\n            })\r\n        }.bind(this));\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.on(document, POINTERUP_EVENT_NAME, this._clearTimer.bind(this));\r\n        eventsEngine.on(document, POINTERCANCEL_EVENT_NAME, this._clearTimer.bind(this));\r\n        this._spinChangeHandler({\r\n            event: e\r\n        })\r\n    },\r\n    _dispose: function() {\r\n        this._clearTimer();\r\n        this.callBase()\r\n    },\r\n    _clearTimer: function() {\r\n        eventsEngine.off(this.$element(), holdEvent.name);\r\n        var document = domAdapter.getDocument();\r\n        eventsEngine.off(document, POINTERUP_EVENT_NAME);\r\n        eventsEngine.off(document, POINTERCANCEL_EVENT_NAME);\r\n        if (this._feedBackDeferred) {\r\n            this._feedBackDeferred.resolve()\r\n        }\r\n        if (this._holdTimer) {\r\n            clearInterval(this._holdTimer)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"onChange\":\r\n            case \"direction\":\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nmodule.exports = SpinButton;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme/ui/number_box/number_box.spin.js\n// module id = 757\n// module chunks = 1 3 4 5 8","/*!\n * devextreme-react\n * Version: 18.2.2-beta.1\n * Build date: Thu Oct 25 2018\n *\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-react\n */\n\n\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar number_box_1 = require(\"devextreme/ui/number_box\");\nvar prop_types_1 = require(\"prop-types\");\nvar component_1 = require(\"./core/component\");\nvar nested_option_1 = require(\"./core/nested-option\");\nvar NumberBox = /** @class */ (function (_super) {\n    __extends(NumberBox, _super);\n    function NumberBox() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._WidgetClass = number_box_1.default;\n        _this._defaults = {\n            defaultValue: \"value\"\n        };\n        return _this;\n    }\n    Object.defineProperty(NumberBox.prototype, \"instance\", {\n        get: function () {\n            return this._instance;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return NumberBox;\n}(component_1.Component));\nexports.NumberBox = NumberBox;\nNumberBox.propTypes = {\n    accessKey: prop_types_1.PropTypes.string,\n    activeStateEnabled: prop_types_1.PropTypes.bool,\n    disabled: prop_types_1.PropTypes.bool,\n    elementAttr: prop_types_1.PropTypes.object,\n    focusStateEnabled: prop_types_1.PropTypes.bool,\n    format: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.object,\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.string\n    ]),\n    height: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.number,\n        prop_types_1.PropTypes.string\n    ]),\n    hint: prop_types_1.PropTypes.string,\n    hoverStateEnabled: prop_types_1.PropTypes.bool,\n    inputAttr: prop_types_1.PropTypes.object,\n    invalidValueMessage: prop_types_1.PropTypes.string,\n    isValid: prop_types_1.PropTypes.bool,\n    max: prop_types_1.PropTypes.number,\n    min: prop_types_1.PropTypes.number,\n    mode: prop_types_1.PropTypes.oneOf([\n        \"number\",\n        \"text\",\n        \"tel\"\n    ]),\n    name: prop_types_1.PropTypes.string,\n    onChange: prop_types_1.PropTypes.func,\n    onContentReady: prop_types_1.PropTypes.func,\n    onCopy: prop_types_1.PropTypes.func,\n    onCut: prop_types_1.PropTypes.func,\n    onDisposing: prop_types_1.PropTypes.func,\n    onEnterKey: prop_types_1.PropTypes.func,\n    onFocusIn: prop_types_1.PropTypes.func,\n    onFocusOut: prop_types_1.PropTypes.func,\n    onInitialized: prop_types_1.PropTypes.func,\n    onInput: prop_types_1.PropTypes.func,\n    onKeyDown: prop_types_1.PropTypes.func,\n    onKeyPress: prop_types_1.PropTypes.func,\n    onKeyUp: prop_types_1.PropTypes.func,\n    onOptionChanged: prop_types_1.PropTypes.func,\n    onPaste: prop_types_1.PropTypes.func,\n    onValueChanged: prop_types_1.PropTypes.func,\n    placeholder: prop_types_1.PropTypes.string,\n    readOnly: prop_types_1.PropTypes.bool,\n    rtlEnabled: prop_types_1.PropTypes.bool,\n    showClearButton: prop_types_1.PropTypes.bool,\n    showSpinButtons: prop_types_1.PropTypes.bool,\n    step: prop_types_1.PropTypes.number,\n    stylingMode: prop_types_1.PropTypes.oneOf([\n        \"outlined\",\n        \"underlined\",\n        \"filled\"\n    ]),\n    tabIndex: prop_types_1.PropTypes.number,\n    text: prop_types_1.PropTypes.string,\n    useLargeSpinButtons: prop_types_1.PropTypes.bool,\n    validationError: prop_types_1.PropTypes.object,\n    validationMessageMode: prop_types_1.PropTypes.oneOf([\n        \"always\",\n        \"auto\"\n    ]),\n    value: prop_types_1.PropTypes.number,\n    valueChangeEvent: prop_types_1.PropTypes.string,\n    visible: prop_types_1.PropTypes.bool,\n    width: prop_types_1.PropTypes.oneOfType([\n        prop_types_1.PropTypes.func,\n        prop_types_1.PropTypes.number,\n        prop_types_1.PropTypes.string\n    ])\n};\n// tslint:disable:max-classes-per-file\n// owners:\n// NumberBox\nvar Format = /** @class */ (function (_super) {\n    __extends(Format, _super);\n    function Format() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Format.OptionName = \"format\";\n    return Format;\n}(nested_option_1.default));\nexports.Format = Format;\nexports.default = NumberBox;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/devextreme-react/number-box.js\n// module id = 907\n// module chunks = 8"],"sourceRoot":""}